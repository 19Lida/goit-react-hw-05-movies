{"version":3,"file":"static/js/574.e4270749.chunk.js","mappings":"sSACMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAGAC,EAAW,mCAAG,sGACFL,EAASM,IAAI,uBADX,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,EAAKC,SAFa,2CAAH,qDAIXC,EAAc,mCAAG,WAAMC,GAAN,yFACLV,EAASM,IAAT,iBAAuBI,IADlB,uBACpBH,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAIdI,EAAiB,mCAAG,WAAMC,GAAN,yFACRZ,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNU,MAAOD,KAHoB,uBACvBL,EADuB,EACvBA,KADuB,kBAMxBA,EAAKC,SANmB,2CAAH,sDAQjBM,EAAO,mCAAG,WAAMJ,GAAN,yFACEV,EAASM,IAAT,iBAAuBI,EAAvB,aADF,uBACbH,EADa,EACbA,KADa,kBAEdA,EAAKQ,MAFS,2CAAH,sDAIPC,EAAU,mCAAG,WAAMN,GAAN,yFACDV,EAASM,IAAT,iBAAuBI,EAAvB,aADC,uBAChBH,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD,yGCOvB,UA9BoB,WAClB,OAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQT,GAAOU,EAAAA,EAAAA,MAAPV,IACRW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEEN,EAAAA,EAAAA,IAAWN,GAFb,OAEXH,EAFW,OAGjBY,EAAWZ,GAHM,gDAKjBgB,QAAQC,IAAI,KAAMC,SALD,yDAAH,qDAQlBH,GACD,GAAE,CAACZ,IACJ,IAAMgB,EAAWR,EAAQS,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC3B,2BACE,wBAAKD,KACL,uBAAIC,MAFGnB,EADkB,IAM7B,OACE,+BACE,wBACuB,IAApBgB,EAASI,OACN,2CACAJ,KAIX,C","sources":["components/services/moviesAPI.js","pages/ReviewPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '8e8c3d98d3e43f50386cf07b0bdc43af',\n  },\n});\nexport const getTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data.results;\n};\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\nexport const fetchMovieByQuery = async keyword => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query: keyword,\n    },\n  });\n  return data.results;\n};\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'components/services/moviesAPI';\n\nconst ReviewsPage = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const data = await getReviews(id);\n        setReviews(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchReviews();\n  }, [id]);\n  const elements = reviews.map(({ id, author, content }) => (\n    <li key={id}>\n      <h3>{author}</h3>\n      <p>{content}</p>\n    </li>\n  ));\n  return (\n    <>\n      <ul>\n        {elements.length === 0\n          ? \"We don't have any reviews for this movie\"\n          : elements}\n      </ul>\n    </>\n  );\n};\nexport default ReviewsPage;\n"],"names":["instance","axios","baseURL","params","api_key","getTrending","get","data","results","fetchMovieById","id","fetchMovieByQuery","keyword","query","getCast","cast","getReviews","useState","reviews","setReviews","useParams","useEffect","fetchReviews","console","log","message","elements","map","author","content","length"],"sourceRoot":""}