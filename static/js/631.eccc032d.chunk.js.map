{"version":3,"file":"static/js/631.eccc032d.chunk.js","mappings":"sSACMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAGAC,EAAW,mCAAG,sGACFL,EAASM,IAAI,uBADX,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,EAAKC,SAFa,2CAAH,qDAIXC,EAAc,mCAAG,WAAMC,GAAN,yFACLV,EAASM,IAAT,iBAAuBI,IADlB,uBACpBH,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAIdI,EAAiB,mCAAG,WAAMC,GAAN,yFACRZ,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNU,MAAOD,KAHoB,uBACvBL,EADuB,EACvBA,KADuB,kBAMxBA,EAAKC,SANmB,2CAAH,sDAQjBM,EAAO,mCAAG,WAAMJ,GAAN,yFACEV,EAASM,IAAT,iBAAuBI,EAAvB,aADF,uBACbH,EADa,EACbA,KADa,kBAEdA,EAAKQ,MAFS,2CAAH,sDAIPC,EAAU,mCAAG,WAAMN,GAAN,yFACDV,EAASM,IAAT,iBAAuBI,EAAvB,aADC,uBAChBH,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD,yGCYvB,UAnCiB,WACf,OAAwBS,EAAAA,EAAAA,UAAS,IAAjC,eAAOF,EAAP,KAAaG,EAAb,KACQR,GAAOS,EAAAA,EAAAA,MAAPT,IACRU,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKP,EAAAA,EAAAA,IAAQJ,GAFb,OAERH,EAFQ,OAGdW,EAAQX,GAHM,uGAAH,qDAQfc,GACD,GAAE,CAACX,IACJ,IAAMY,EAAWP,EAAKQ,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACxB,0BACGA,IACC,gBACEC,IAAG,0CAAqCD,GACxCE,IAAI,GACJC,MAAM,SAGV,uBAAIL,KACJ,uBAAIC,MATGf,EADe,IAa1B,OACE,wBACuB,IAApBY,EAASQ,OACN,2CACAR,GAGT,C","sources":["components/services/moviesAPI.js","pages/CastPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '8e8c3d98d3e43f50386cf07b0bdc43af',\n  },\n});\nexport const getTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data.results;\n};\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\nexport const fetchMovieByQuery = async keyword => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query: keyword,\n    },\n  });\n  return data.results;\n};\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'components/services/moviesAPI.js';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const data = await getCast(id);\n        setCast(data);\n      } catch (error) {\n        // console.log(error.message);\n      }\n    };\n    fetchCast();\n  }, [id]);\n  const elements = cast.map(({ id, name, character, profile_path }) => (\n    <li key={id}>\n      {profile_path && (\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n          alt=\"\"\n          width=\"200\"\n        ></img>\n      )}\n      <p>{name}</p>\n      <p>{character}</p>\n    </li>\n  ));\n  return (\n    <ul>\n      {elements.length === 0\n        ? \"We don't have any reviews for this movie\"\n        : elements}\n    </ul>\n  );\n};\nexport default CastPage;\n"],"names":["instance","axios","baseURL","params","api_key","getTrending","get","data","results","fetchMovieById","id","fetchMovieByQuery","keyword","query","getCast","cast","getReviews","useState","setCast","useParams","useEffect","fetchCast","elements","map","name","character","profile_path","src","alt","width","length"],"sourceRoot":""}